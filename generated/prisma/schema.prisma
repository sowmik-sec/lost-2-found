// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  foundItems FoundItem[] // One-to-Many with FoundItem
  claims     Claim[] // One-to-Many with Claim
  profile    Profile? // One-to-One with Profile

  @@map("users")
}

model FoundItemCategory {
  id         String      @id @default(uuid())
  name       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  foundItems FoundItem[] // One-to-Many with FoundItem

  @@map("foundItemCategories")
}

model FoundItem {
  id            String            @id @default(uuid())
  userId        String
  categoryId    String
  foundItemName String
  description   String
  location      String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  user          User              @relation(fields: [userId], references: [id]) // Belongs to one User
  category      FoundItemCategory @relation(fields: [categoryId], references: [id]) // Belongs to one FoundItemCategory
  claims        Claim[] // One-to-Many with Claim

  @@index([userId])
  @@index([categoryId])
  @@map("foundItems")
}

model Claim {
  id                     String    @id @default(uuid())
  userId                 String
  foundItemId            String
  status                 Status    @default(PENDING)
  distinguishingFeatures String
  lostDate               DateTime
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id]) // Belongs to one User
  foundItem              FoundItem @relation(fields: [foundItemId], references: [id]) // Belongs to one FoundItem

  @@index([userId])
  @@index([foundItemId])
  @@map("claims")
}

model Profile {
  id        String   @id @default(uuid())
  userId    String   @unique
  bio       String
  age       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id]) // Belongs to one User

  @@map("profiles")
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}
